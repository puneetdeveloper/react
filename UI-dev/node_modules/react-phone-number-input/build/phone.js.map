{"version":3,"sources":["../source/phone.js"],"names":["validate","parse_plaintext_international","parse_plaintext_local","template","local_phone_digits","parse_digits","count_digits","format","derive_phone_number_format","format_local","format_international","populate_template","digits_in_local_phone_number_template","digits_in_international_phone_number_template","digit_index","index_in_template","plaintext_international","plaintext_local","trim_trunk_prefix","add_trunk_prefix","trunk_prefix","local_to_international_style","valid","slice","length","country","formatted","has_trunk_prefix","digits","undefined","value","with_trunk_prefix","Error","trunk_prefix_index","search","trunk_prefix_ends_at","test","left_out_template","opening_braces","count_occurences","closing_braces","dangling_braces","replace","phone_country","console","error","plaintext_local_value","number","populated","brace_open","symbol_index","symbol","indexOf","_template","regular_expression","match","including_trunk_prefix","caret_position","international","phone_template","digit_index_so_far","i","plaintext","string","count","character","local","trim"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASjB,MAAT,CAAgBuB,KAAhB,EAAuBvB,MAAvB,EACP;AACC,KAAI,CAACuB,KAAL,EACA;AACC,SAAO,EAAP;AACA;;AAED;AACA;AACA,KAAIvB,MAAJ,EACA;AACC,SAAOE,aAAaqB,KAAb,EAAoBvB,MAApB,CAAP;AACA;;AAED;AACA;AACA;;AAEA;AACA;AACAA,UAASC,2BAA2BsB,KAA3B,CAAT;;AAEA;AACA,KAAIvB,MAAJ,EACA;AACC;AACA,SAAOG,qBAAqBoB,KAArB,EAA4BvB,MAA5B,CAAP;AACA;;AAED;AACA;AACA;AACA,QAAOuB,KAAP;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,SAAStB,0BAAT,CAAoCsB,KAApC,EACP;AACC;AACA,KAAMa,gBAAgB,uBAAeb,KAAf,CAAtB;;AAEA;AACA;AACA,KAAI,CAACa,aAAL,EACA;AACC;AACA;AACA;;AAED;AACA,KAAMpC,SAAS,kBAAQoC,aAAR,CAAf;;AAEA;AACA;AACA,KAAI,CAACpC,MAAL,EACA;AACCqC,UAAQC,KAAR,kDAA6DF,aAA7D;AACA;AACA;;AAED;AACA;AACA,KAAIb,MAAMN,MAAN,IAAgB,IAAIA,MAAJ,GAAajB,OAAOkB,OAAP,CAAeD,MAA5B,GAAqCX,8CAA8CN,MAA9C,EAAsDuB,KAAtD,CAAzD,EACA;AACC,SAAOvB,MAAP;AACA;;AAED;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASE,YAAT,CAAsBqB,KAAtB,EAA6BvB,MAA7B,EAAqCwB,iBAArC,EACP;AACC;AACA;AACA,KAAI,OAAOxB,MAAP,KAAkB,QAAtB,EACA;AACCA,WAAS,kBAAQ,kCAAoBA,MAApB,KAA+BA,MAAvC,CAAT;AACA;;AAED;AACA,KAAI,CAACA,MAAL,EACA;AACC,QAA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","file":"phone.js","sourcesContent":["import formats from './formats'\nimport detect_country, { country_from_locale } from './country'\n\n// Validates an international plaintext phone number (e.g. \"+79991234567\")\nexport function validate(plaintext_international, format)\n{\n\t// Sanity check\n\tif (!plaintext_international)\n\t{\n\t\treturn false\n\t}\n\t\n\t// If format is not specified, then try to autodetect it.\n\tif (!format)\n\t{\n\t\t// Derive phone number format from the\n\t\t// phone number itself (if it's international)\n\t\tformat = derive_phone_number_format(plaintext_international)\n\t}\n\n\t// If not phone number format is present,\n\t// then assume the phone number is invalid.\n\tif (!format)\n\t{\n\t\t// console.error(`No \"format\" specified for phone number validation (and none could be derived). Assuming the phone number is invalid.`)\n\t\treturn false\n\t}\n\n\t// If custom format validation supplied, then use it.\n\tif (typeof format.valid === 'function')\n\t{\n\t\treturn format.valid(plaintext_international.slice('+'.length + format.country.length))\n\t}\n\n\t// Check phone number length\n\tif (plaintext_international.length !==\n\t\t'+'.length +\n\t\tformat.country.length +\n\t\tdigits_in_international_phone_number_template(format, plaintext_international))\n\t{\n\t\treturn false\n\t}\n\n\t// Check the plus sign (sanity check)\n\tif (plaintext_international[0] !== '+')\n\t{\n\t\treturn false\n\t}\n\n\t// Check country code\n\tif (plaintext_international.slice(1, 1 + format.country.length) !== format.country)\n\t{\n\t\treturn false\n\t}\n\n\t// Seems to be valid\n\treturn true\n}\n\n// Reduces a formatted phone number to an \n// international plaintext one (with country code).\n//\n// E.g. \"8 (999) 123-45-67\" -> \"+79991234567\"\n//       \"+7 999 123 45 67\" -> \"+79991234567\"\n//           \"07700 900756\" -> \"+447700900756\"\n//\n// This function is used in <input/> to parse text into `value`\n//\nexport function parse_plaintext_international(formatted, format, has_trunk_prefix)\n{\n\t// The input digits\n\tlet digits = parse_digits(formatted)\n\n\tif (!digits)\n\t{\n\t\treturn undefined\n\t}\n\n\t// If the input wass already international,\n\t// just return the digits with the '+' sign.\n\tif (formatted[0] === '+')\n\t{\n\t\treturn `+${digits}`\n\t}\n\n\t// Otherwise it's a local phone number\n\n\t// Trim excessive phone number digits\n\t// (this is used in <input/>)\n\tdigits = local_phone_digits(digits, format, has_trunk_prefix)\n\n\t// Convert local plaintext to international plaintext\n\tconst value = plaintext_international(digits, format, has_trunk_prefix)\n\n\t// Return `undefined` for empty strings\n\tif (!value)\n\t{\n\t\treturn undefined\n\t}\n\n\treturn value\n}\n\n// Reduces a formatted phone number to a\n// local plaintext one (without country code).\n//\n// E.g. \"(999) 123-45-67\" -> \"9991234567\"\n//         \"07700 900756\" -> \"07700900756\"\n//\n// This function is used in <input/> to parse text into `value`\n//\nexport function parse_plaintext_local(formatted, format, with_trunk_prefix)\n{\n\t// Sanity check\n\tif (formatted[0] === '+')\n\t{\n\t\tthrow new Error(`Must be a local formatted number: ${formatted}`)\n\t}\n\n\t// Trunk prefix is supposed not to be trimmed from the formatted phone number\n\tconst has_trunk_prefix = true\n\n\t// Trim excessive phone number digits\n\t// (this is used in <input/>)\n\tlet value = local_phone_digits(formatted, format, has_trunk_prefix)\n\n\tif (with_trunk_prefix === false)\n\t{\n\t\tvalue = trim_trunk_prefix(value, format)\n\t}\n\n\treturn value\n}\n\n// Returns phone number template for `value`\n// for the specified phone number format.\n//\n// `value` is plaintext local without trunk prefix.\n//\n// E.g.  \"1112222222\" -> \"8 (AAA) BBB-BB-BB\"\n//\n// If `with_trunk_prefix` is `false` then\n// the trunk prefix is trimmed from the resulting template.\n//\nexport function template(format, value, with_trunk_prefix)\n{\n\t// Will hold the return value\n\tlet template\n\n\t// Simple phone number formatting\n\tif (typeof format.template === 'string')\n\t{\n\t\ttemplate = format.template\n\t}\n\t// Custom phone number formatting\n\telse if (typeof format.template === 'function')\n\t{\n\t\ttemplate = format.template(value)\n\t}\n\n\t// Sanity check\n\t// (e.g. when `template` function didn't return a template)\n\tif (!template)\n\t{\n\t\tthrow new Error(`Phone number template is not defined for phone number \"${value}\" for country code \"${format.country}\"`)\n\t}\n\n\t// Optionally remove trunk prefix part from the template\n\t// (and dangling braces too)\n\tif (with_trunk_prefix === false)\n\t{\n\t\t// Where trunk prefix begins\n\t\tconst trunk_prefix_index = template.search(/[0-9]/)\n\n\t\t// Find where trunk prefix ends\n\t\tlet trunk_prefix_ends_at = trunk_prefix_index\n\t\twhile (/[0-9\\-\\s]/.test(template[trunk_prefix_ends_at + 1]))\n\t\t{\n\t\t\ttrunk_prefix_ends_at++\n\t\t}\n\n\t\t// Split template into two parts:\n\t\t// one with trunk prefix and the other without trunk prefix.\n\t\tconst left_out_template = template.slice(0, trunk_prefix_ends_at)\n\t\ttemplate = template.slice(trunk_prefix_ends_at + 1)\n\t\t\n\t\t// Fix dangling braces (e.g. for UK numbers: \"(0AA) BBBB BBBB\")\n\t\t\n\t\tconst opening_braces = count_occurences('(', left_out_template)\n\t\tconst closing_braces = count_occurences(')', left_out_template)\n\n\t\tlet dangling_braces = opening_braces - closing_braces\n\t\twhile (dangling_braces > 0)\n\t\t{\n\t\t\ttemplate = template.replace(')', '')\n\t\t\tdangling_braces--\n\t\t}\n\t}\n\n\treturn template\n}\n\n// Converts a local formatted phone number to just digits\n// while also trimming excessive digits in the end.\n// (doesn't trim trunk prefix)\n//\n// E.g. \"8 (999) 123-45-67\" -> \"89991234567\"\n//\nexport function local_phone_digits(value, format, has_trunk_prefix)\n{\n\tconst plaintext_local = parse_digits(value)\n\treturn plaintext_local.slice(0, digits_in_local_phone_number_template(format, plaintext_local, has_trunk_prefix))\n}\n\n// Retains only digits in a string\nexport function parse_digits(value)\n{\n\t// Sanity check\n\tif (!value)\n\t{\n\t\treturn ''\n\t}\n\n\t// Replace all non-digits with emptiness\n\treturn value.replace(/[^0-9]/g, '')\n}\n\n// Counts digits in a string\nexport function count_digits(value)\n{\n  return parse_digits(value).length\n}\n\n// Formats a plaintext phone number\n// (either local or international):\n// if `format` is passed, then formats\n// `value` as a local phone number,\n// otherwise formats `value` as an\n// international phone number.\n//\n// `format` can be a phone number format structure,\n// or an ISO 3166-1 country code, or a locale.\n//\n// If `format` is not specified then\n// the appropriate international number format\n// will be derived from the phone number itself\n// (only if it's plaintext international)\n//\n// E.g.: (\"+79991234567\")        -> \"+7 999 123 45 67\"\n//       (\"9991234567\", 'ru-RU') -> \"(999) 123-45-67\"\n//\n//       (\"+447700900756\")     -> \"+44 7700 900756\"\n//       (\"07700900756\", 'GB') -> \"07700 900756\"\n//\nexport function format(value, format)\n{\n\tif (!value)\n\t{\n\t\treturn ''\n\t}\n\n\t// If format is specified, then format\n\t// the phone number as a local one.\n\tif (format)\n\t{\n\t\treturn format_local(value, format)\n\t}\n\n\t// Otherwise, if format is not specified,\n\t// then try to autodetect it\n\t// (only if the phone is plaintext international)\n\n\t// Derive phone number format from the\n\t// phone number itself (if it's international)\n\tformat = derive_phone_number_format(value)\n\n\t// If phone number format was successfully derived\n\tif (format)\n\t{\n\t\t// Format the phone number as an international one\n\t\treturn format_international(value, format)\n\t}\n\n\t// No suitable phone format found,\n\t// so it doesn't know how to format the phone number.\n\t// At least it won't crash and will output something.\n\treturn value\n}\n\n// Derives phone number format from\n// a plaintext international phone number.\n//\n// E.g.  \"+78005553535\" -> \"RU\"\n//      \"+447700900431\" -> \"UK\"\n//\nexport function derive_phone_number_format(value)\n{\n\t// Derive country from the phone number (if it's international)\n\tconst phone_country = detect_country(value)\n\n\t// If no original phone country could be detected,\n\t// then it won't know how to format the phone number.\n\tif (!phone_country)\n\t{\n\t\t// console.error(`No phone number format was passed and no country could be derived from the international plaintext phone number \"${value}\". Create an issue in the project repo on GitHub: https://github.com/halt-hammerzeit/react-phone-number-input/issues`)\n\t\treturn\n\t}\n\n\t// Phone format for the phone number\n\tconst format = formats[phone_country]\n\n\t// If there's no predefined phone number format for this country,\n\t// then it won't know how to format the phone number.\n\tif (!format)\n\t{\n\t\tconsole.error(`Phone number format is missing for country \"${phone_country}\". Create a Pull Request with the phone format for this country in the project repo on GitHub: https://github.com/halt-hammerzeit/react-phone-number-input/issues`)\n\t\treturn\n\t}\n\n\t// Check for digits overflow.\n\t// If the check passes then this is the phone number format.\n\tif (value.length <= '+'.length + format.country.length + digits_in_international_phone_number_template(format, value))\n\t{\n\t\treturn format\n\t}\n\n\t// Too much digits for this phone number format\n}\n\n// Formats a plaintext phone number\n// (either local or international)\n// as a local phone number.\n//\n// The `format` attribute can be either a phone formatter,\n// or an ISO 3166-1 country code, or a locale.\n// (`format` is required)\n//\n// E.g.: \"+79991234567\" -> \"(999) 123-45-67\"\n// E.g.:   \"9991234567\" -> \"(999) 123-45-67\"\n//\n// This function is used in <input/> to format `value` into text\n//\n// If `with_trunk_prefix` is `false` then it denotes\n// that the `value` doesn't contain trunk prefix,\n// and also that it will be formatted using a template\n// with trimmed trunk prefix.\n//\n// Otherwise `value` is assumed to contain trunk prefix\n// (in case it's local) and it's formatted using\n// a template with trunk prefix.\n//\nexport function format_local(value, format, with_trunk_prefix)\n{\n\t// Find a phone number format corresponding\n\t// to this ISO 3166-1 country code or locale.\n\tif (typeof format === 'string')\n\t{\n\t\tformat = formats[country_from_locale(format) || format]\n\t}\n\n\t// If no phone number format could be derived, then throw an error.\n\tif (!format)\n\t{\n\t\tthrow new Error(`Phone number format was not specified for formatting value \"${value}\"`)\n\t}\n\n\t// Sanity check\n\tif (!value)\n\t{\n\t\treturn ''\n\t}\n\n\t// Obtain `digits` from `value`\n\tif (with_trunk_prefix === false)\n\t{\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\tvalue = value.slice('+'.length + format.country.length)\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// No need to convert anything, `value` is already `digits`\n\t\t}\n\t}\n\telse\n\t{\n\t\tlet plaintext_local_value\n\n\t\t// Convert value from plaintext international to plaintext local\n\t\tif (value[0] === '+')\n\t\t{\n\t\t\tplaintext_local_value = plaintext_local(value, format, with_trunk_prefix)\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// `value` is already plaintext local\n\t\t\tplaintext_local_value = value\n\t\t}\n\n\t\t// and trim trunk prefix\n\t\tvalue = trim_trunk_prefix(plaintext_local_value, format)\n\t}\n\n\tif (!value)\n\t{\n\t\treturn ''\n\t}\n\n\t// Populate phone template (optionally without trunk prefix) with digits\n\treturn populate_template(template(format, value, with_trunk_prefix), value)\n}\n\n// Formats an plaintext phone number\n// (either local or international)\n// as an international phone number.\n//\n// (`format` is required)\n//\n// E.g.: \"+79991234567\" -> \"+7 999 123 45 67\"\n// E.g.:   \"9991234567\" -> \"+7 999 123 45 67\"\nexport function format_international(value, format)\n{\n\tconst with_trunk_prefix = false\n\tlet number = local_to_international_style(format_local(value, format, with_trunk_prefix))\n\n\treturn `+${format.country}${number.length > 0 ? ' ' + number : ''}`\n}\n\n// Populates local phone template with `digits`\n// (which are plaintext local phone number without trunk code).\n//\n// If `digits.length` exceeds the template length,\n// then it will return just the `digits`.\n//\n// E.g. (\"(AAA) BBB-BB-BB\", \"1234567890\") -> \"(123) 456-78-90\"\n//              (\"8 (xxx) xxx-xx-xx\", \"\") -> \"\"\n//            (\"8 (xxx) xxx-xx-xx\", \"1\") -> \"8 (1  )\"\n//           (\"8 (xxx) xxx-xx-xx\", \"12\") -> \"8 (12 )\"\n//          (\"8 (xxx) xxx-xx-xx\", \"123\") -> \"8 (123)\"\n//   (\"8 (xxx) xxx-xx-xx\", \"1234567890\") -> \"8 (123) 456-78-90\"\n//\nexport function populate_template(template, digits)\n{\n\tif (!digits)\n\t{\n\t\treturn ''\n\t}\n\n\tlet populated = ''\n\tlet digit_index = 0\n\tlet brace_open = false\n\tlet symbol_index = 0\n\tlet symbol\n\n\t// Replace letters with digits in a cycle\n\twhile (symbol_index < template.length)\n\t{\n\t\tsymbol = template[symbol_index]\n\n\t\tif (symbol >= 'A' && symbol <= 'z')\n\t\t\t// || (symbol >= '0' && symbol <= '9'))\n\t\t{\n\t\t\tsymbol = digits[digit_index]\n\t\t\tdigit_index++\n\t\t}\n\t\telse if (symbol === '(')\n\t\t{\n\t\t\tbrace_open = true\n\t\t}\n\n\t\tpopulated += symbol\n\t\tsymbol_index++\n\n\t\tif (digit_index === digits.length)\n\t\t{\n\t\t\tbreak\n\t\t}\n\t}\n\n\t// If `digits.length` exceeds the template length,\n\t// then simply return just the `digits`.\n\tif (digit_index < digits.length)\n\t{\n\t\treturn digits\n\t}\n\n\t// If a parenthesis was opened, then close it,\n\t// and trim everything else.\n\tif (brace_open)\n\t{\n\t\treturn populated + template.slice(symbol_index, template.indexOf(')') + 1).replace(/[0-9A-z]/g, ' ')\n\t}\n\n\t// Otherwise just trim everything after the last populated letter\n\treturn populated\n}\n\n// Returns digit count in a local phone number format template\n// (count trunk prefix digits in)\n//\n// E.g. \"8 (AAA) BBB-BB-BB\" -> 11\n//\nexport function digits_in_local_phone_number_template(format, plaintext_local, has_trunk_prefix)\n{\n\tconst digits = has_trunk_prefix ? trim_trunk_prefix(plaintext_local, format) : plaintext_local\n\tconst _template = template(format, plaintext_local)\n\tconst regular_expression = has_trunk_prefix === false ? /[A-z]/g : /[0-9A-z]/g\n\treturn (_template.match(regular_expression) || []).length\n}\n\n// Returns digit count in an international phone number format template\n// (ignoring trunk prefix digits)\n//\n// E.g. local template \"0 (AAA) BBB-BB-BB\" -> 10\n//\nexport function digits_in_international_phone_number_template(format, plaintext_international)\n{\n\t// \"A sensible default\" for obtaining phone number template\n\tlet digits = ''\n\n\tif (plaintext_international)\n\t{\n\t\tdigits = plaintext_international.slice('+'.length + format.country.length)\n\t}\n\n\tconst including_trunk_prefix = false\n\treturn digits_in_local_phone_number_template(format, digits, including_trunk_prefix)\n}\n\n// Finds digit index in value at caret position\n//\n// If there's no digit at caret position then \n// returns the index of the closest next digit\n//\n// If there are no more next digits\n// then returns the index of the last digit + 1\n//\n// E.g. (\"1-123-456-7890\", 0) -> 0 (first digit)\n//        ^\n//      (\"1-123-456-7890\", 1) -> 1 (second digit)\n//         ^\n//      (\"1-123-456-7890\", 2) -> 1 (second digit)\n//          ^\n//      (\"1-123-456-7890\", 3) -> 2 (third digit)\n//           ^\n//      (\"1-123-456-7890\", 4) -> 3 (fourth digit)\n//            ^\n//\nexport function digit_index(value, caret_position)\n{\n\treturn count_digits(value.slice(0, caret_position))\n}\n\n// Finds index of digit symbol in template string for this `digit_index`.\n//\n// If `with_trunk_prefix` is `false` then it won't count trunk prefix as a digit.\n//\n// If `international` is `true` then it will use the international phone number template instead of the local one.\n//\n// E.g. (0, \"(AAA) BBB-BB-BB\") -> 1 (first digit (index 0) is at index 1 in template string)\n//            ^\n//      (1, \"(AAA) BBB-BB-BB\") -> 2 (second digit (index 1) is at index 2 in template string)\n//             ^\n//      (2, \"(AAA) BBB-BB-BB\") -> 3 (third digit (index 2) is at index 3 in template string)\n//              ^\n//      (3, \"(AAA) BBB-BB-BB\") -> 6 (fourth digit (index 3) is at index 6 in template string)\n//                 ^\n//      (4, \"(AAA) BBB-BB-BB\") -> 7 (fifth digit (index 4) is at index 7 in template string)\n//                  ^\n//\nexport function index_in_template(digit_index, format, digits, with_trunk_prefix, international)\n{\n\tlet phone_template = template(format, digits, with_trunk_prefix)\n\n\tif (international)\n\t{\n\t\tphone_template = local_to_international_style(phone_template)\n\t}\n\n\tlet digit_index_so_far = -1\n\tlet i = 0\n\twhile (i < phone_template.length)\n\t{\n\t\tif ((phone_template[i] >= 'A' && phone_template[i] <= 'z')\n\t\t\t|| (with_trunk_prefix !== false && (phone_template[i] >= '0' && phone_template[i] <= '9')))\n\t\t{\n\t\t\tdigit_index_so_far++\n\t\t}\n\n\t\tif (digit_index_so_far === digit_index)\n\t\t{\n\t\t\treturn i\n\t\t}\n\n\t\ti++\n\t}\n}\n\n// Converts a plaintext (local or international)\n// phone number to an international one.\n//\n// E.g. \"+78005553535\" -> \"+78005553535\"\n//        \"8005553535\" -> \"+78005553535\"\n//       \"07700900756\" -> \"+447700900756\"\nexport function plaintext_international(plaintext, format, has_trunk_prefix)\n{\n\tif (!plaintext)\n\t{\n\t\treturn ''\n\t}\n\n\t// If it's already plaintext international, then don't change it\n\tif (plaintext[0] === '+')\n\t{\n\t\treturn plaintext\n\t}\n\n\t// Otherwise it's a local plaintext phone number\n\n\t// Trim trunk prefix from the phone number,\n\t// and add country code with a '+' sign to it.\n\n\tif (has_trunk_prefix !== false)\n\t{\n\t\tplaintext = trim_trunk_prefix(plaintext, format)\n\t}\n\n\tif (!plaintext)\n\t{\n\t\treturn ''\n\t}\n\n\treturn `+${format.country}${plaintext}`\n}\n\n// Converts a plaintext (local or international)\n// phone number to a local one.\n//\n// E.g.  \"07700900756\" -> \"07700900756\"\n//     \"+447700900756\" -> \"07700900756\"\n//\nexport function plaintext_local(plaintext, format, has_trunk_prefix)\n{\n\tif (!plaintext)\n\t{\n\t\treturn ''\n\t}\n\n\t// If it's already plaintext local, then don't change it\n\tif (plaintext[0] !== '+')\n\t{\n\t\treturn plaintext\n\t}\n\n\t// Otherwise it's plaintext international\n\t// so trim country code along with the '+' sign\n\t// and add trunk prefix\n\n\tplaintext = plaintext.slice('+'.length + format.country.length)\n\n\tif (has_trunk_prefix !== false)\n\t{\n\t\tplaintext = add_trunk_prefix(plaintext, format)\n\t}\n\n\treturn plaintext\n}\n\n// Trims trunk prefix from plaintext local phone number\n// https://en.wikipedia.org/wiki/Trunk_prefix\n//\n// E.g. \"88005553535\" -> \"8005553535\" // Russia\n//      \"07700900756\" -> \"7700900756\" // UK\n//\nexport function trim_trunk_prefix(plaintext_local, format)\n{\n\treturn plaintext_local.slice(trunk_prefix(format, plaintext_local).length)\n}\n\n// Adds trunk prefix to the phone number\n// https://en.wikipedia.org/wiki/Trunk_prefix\n//\n// E.g. \"8005553535\" -> \"88005553535\" // Russia\n//      \"7700900756\" -> \"07700900756\" // UK\n//\nexport function add_trunk_prefix(digits, format)\n{\n\treturn trunk_prefix(format, digits) + digits\n}\n\n// Extracts trunk prefix from phone number format\n// https://en.wikipedia.org/wiki/Trunk_prefix\n//\nexport function trunk_prefix(format, digits = '')\n{\n\tlet trunk_prefix = ''\n\n\tfor (let symbol of template(format, digits))\n\t{\n\t\tif (symbol >= '0' && symbol <= '9')\n\t\t{\n\t\t\ttrunk_prefix += symbol\n\t\t}\n\t\telse if (symbol >= 'A' && symbol <= 'z')\n\t\t{\n\t\t\tbreak\n\t\t}\n\t}\n\n\treturn trunk_prefix\n}\n\n// Counts all occurences of a symbol in a string\nfunction count_occurences(symbol, string)\n{\n\tlet count = 0\n\n\tfor (let character of string)\n\t{\n\t\tif (character === symbol)\n\t\t{\n\t\t\tcount++\n\t\t}\n\t}\n\n\treturn count\n}\n\n// Removes brackets and replaces dashes with spaces.\n//\n// E.g. \"(999) 111-22-33\" -> \"999 111 22 33\"\n//\nexport function local_to_international_style(local)\n{\n\treturn local\n\t\t// Remove brackets\n\t\t.replace(/[\\(\\)]/g, '')\n\t\t// Replace dashes with spaces\n\t\t.replace(/\\-/g, ' ')\n\t\t.trim()\n}"]}