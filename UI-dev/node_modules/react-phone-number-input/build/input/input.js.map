{"version":3,"sources":["../../source/input/input.js"],"names":["Phone_input","props","context","on_cut","bind","on_paste","on_blur","on_change","on_key_down","format_input_text","value","format","rest","input_element","selectionStart","caret_position","input","setSelectionRange","selectionEnd","start","end","findDOMNode","refs","get_input_text","operation","get_caret_position","get_selection","has_trunk_prefix","phone","caret","set_input_text","text","undefined","set_caret_position","onChange","parse_value","event","setTimeout","onBlur","get_operation_by_event","preventDefault","Component","propTypes","oneOfType","shape","country","string","isRequired","template","func","Keys","Backspace","Delete","keyCode"],"mappings":"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","file":"input.js","sourcesContent":["// https://github.com/sanniassin/react-input-mask/blob/master/InputElement.js\n// https://github.com/halt-hammerzeit/react-phone-number-input\n\nimport React, { PropTypes } from 'react'\nimport ReactDOM from 'react-dom'\n\nimport { edit_and_format, parse_value, format_value } from './editable'\n\n// Usage:\n//\n// <Phone\n// \tvalue={this.state.phone}\n// \tformat={format.RU}\n// \tonChange={phone => this.setState({ phone })}\n// \tclassName=\"phone-input\"\n// \tstyle={{ color: 'black' }} />\n//\nexport default class Phone_input extends React.Component\n{\n\tconstructor(props, context)\n\t{\n\t\tsuper(props)\n\n\t\tthis.on_cut = this.on_cut.bind(this)\n\t\tthis.on_paste = this.on_paste.bind(this)\n\t\tthis.on_blur = this.on_blur.bind(this)\n\t\tthis.on_change = this.on_change.bind(this)\n\t\tthis.on_key_down = this.on_key_down.bind(this)\n\t\tthis.format_input_text = this.format_input_text.bind(this)\n\t}\n\n\trender()\n\t{\n\t\tconst { value, format, ...rest } = this.props\n\n\t\treturn (\n\t\t\t<input\n\t\t\t\t{...rest}\n\t\t\t\ttype=\"tel\"\n\t\t\t\tref=\"input\"\n\t\t\t\tvalue={format_value(value, format)}\n\t\t\t\tonKeyDown={this.on_key_down}\n\t\t\t\tonChange={this.on_change}\n\t\t\t\tonBlur={this.on_blur}\n\t\t\t\tonPaste={this.on_paste}\n\t\t\t\tonCut={this.on_cut}/>\n\t\t)\n\t}\n\n\t// Gets <input/> textual value\n\tget_input_text()\n\t{\n\t\treturn this.input_element().value\n\t}\n\n\t// Gets <input/> caret position\n\tget_caret_position()\n\t{\n\t\treturn this.input_element().selectionStart\n\t}\n\n\t// Sets <input/> caret position\n\tset_caret_position(caret_position)\n\t{\n\t\t// DOM Node\n\t\tconst input = this.input_element()\n\n\t\t// Set caret position\n\t\tinput.setSelectionRange(caret_position, caret_position)\n\t}\n\n\t// Gets <input/> selected position\n\tget_selection()\n\t{\n\t\t// DOM Node\n\t\tconst input = this.input_element()\n\n\t\t// If no selection, return nothing\n\t\tif (input.selectionStart === input.selectionEnd)\n\t\t{\n\t\t\treturn\n\t\t}\n\n\t\treturn { start: input.selectionStart, end: input.selectionEnd }\n\t}\n\n\t// Returns <input/> DOM Element\n\tinput_element()\n\t{\n\t\treturn ReactDOM.findDOMNode(this.refs.input)\n\t}\n\n\t// Parses the <input/> textual value\n\t// into a plaintext international `value`\n\tparse_value()\n\t{\n\t\tconst { format } = this.props\n\n\t\treturn parse_value(this.get_input_text(), format)\n\t}\n\n\t// Formats <input/> textual value as a phone number\n\tformat_input_text(operation)\n\t{\n\t\tconst { format } = this.props\n\n\t\t// Apply the pending operation to the <input/> textual value (if any),\n\t\t// and then format the <input/> textual value as a phone number\n\t\t// (and reposition the caret position accordingly)\n\t\tconst { phone, caret } = edit_and_format\n\t\t(\n\t\t\toperation,\n\t\t\tthis.get_input_text(),\n\t\t\tformat,\n\t\t\tthis.get_caret_position(),\n\t\t\tthis.get_selection(),\n\t\t\t{ has_trunk_prefix: false }\n\t\t)\n\n\t\t// Set <input/> textual value and caret position\n\t\t// (have to do this so that React\n\t\t//  doesn't reset caret position)\n\t\tthis.set_input_text(phone, caret)\n\t}\n\n\t// Sets <input/> textual value and caret position\n\tset_input_text(text, caret_position)\n\t{\n\t\t// DOM Node\n\t\tconst input = this.input_element()\n\n\t\t// set <input/> textual value manually to also set caret position\n\t\t// and prevent React from resetting the caret position later\n\t\t// inside subsequent `render()`.\n\t\tinput.value = text\n\n\t\t// Set caret position (with the neccessary adjustments)\n\t\tif (caret_position !== undefined)\n\t\t{\n\t\t\tthis.set_caret_position(caret_position)\n\t\t}\n\n\t\tconst { onChange } = this.props\n\n\t\tif (onChange)\n\t\t{\n\t\t\tonChange(this.parse_value())\n\t\t}\n\t}\n\n\t// Intercepts \"Cut\" event.\n\t// Special handling for \"Cut\" event because\n\t// it wouldn't copy to clipboard otherwise.\n\ton_cut(event)\n\t{\n\t\tsetTimeout(this.format_input_text, 0)\n\t}\n\n\t// This handler is a workaround for `redux-form`\n\ton_blur(event)\n\t{\n\t\tconst { onBlur } = this.props\n\n\t\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t\t// so that it gets a parsed `value` in its `onBlur` handler,\n\t\t// not the formatted one.\n\t\tif (onBlur)\n\t\t{\n\t\t\tonBlur(this.parse_value())\n\t\t}\n\t}\n\n\ton_paste(event)\n\t{\n\t\tthis.format_input_text()\n\t}\n\n\ton_change(event)\n\t{\n\t\tthis.format_input_text()\n\t}\n\n\t// Intercepts \"Delete\" and \"Backspace\" keys\n\t// (hitting \"Delete\" or \"Backspace\"\n\t//  at any caret position should always result in \n\t//  erasing a digit)\n\ton_key_down(event)\n\t{\n\t\tconst operation = get_operation_by_event(event)\n\n\t\tif (operation)\n\t\t{\n\t\t\tthis.format_input_text(operation)\n\t\t\treturn event.preventDefault()\n\t\t}\n\t}\n}\n\nPhone_input.propTypes =\n{\n\t// Phone number format description.\n\t// Either a basic one (with `template` being a string),\n\t// or a more complex one (with `template` being a function).\n\tformat : PropTypes.oneOfType\n\t([\n\t\tPropTypes.shape\n\t\t({\n\t\t\tcountry  : PropTypes.string.isRequired,\n\t\t\ttemplate : PropTypes.string.isRequired\n\t\t}),\n\t\tPropTypes.shape\n\t\t({\n\t\t\tcountry  : PropTypes.string.isRequired,\n\t\t\ttemplate : PropTypes.func.isRequired\n\t\t})\n\t]),\n\t// `format` is not required for automatic\n\t// (iPhone style) phone number input\n\t// .isRequired,\n\n\t// Phone number `value`.\n\t// Is a plaintext international phone number\n\t// (e.g. \"+12223333333\" for USA)\n\tvalue : PropTypes.string,\n\n\t// This handler is called each time\n\t// the phone number <input/> changes its textual value.\n\tonChange : PropTypes.func.isRequired,\n\n\t// This `onBlur` interceptor is a workaround for `redux-form`,\n\t// so that it gets a parsed `value` in its `onBlur` handler,\n\t// not the formatted one.\n\tonBlur : PropTypes.func\n}\n\n// Key codes\nconst Keys =\n{\n\tBackspace : 8,\n\tDelete    : 46\n}\n\nfunction get_operation_by_event(event)\n{\n\tswitch (event.keyCode)\n\t{\n\t\tcase Keys.Backspace:\n\t\t\treturn 'Backspace'\n\n\t\tcase Keys.Delete:\n\t\t\treturn 'Delete'\n\t}\n}"]}