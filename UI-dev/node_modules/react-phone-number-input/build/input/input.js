'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _objectWithoutProperties2 = require('babel-runtime/helpers/objectWithoutProperties');

var _objectWithoutProperties3 = _interopRequireDefault(_objectWithoutProperties2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactDom = require('react-dom');

var _reactDom2 = _interopRequireDefault(_reactDom);

var _editable = require('./editable');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Usage:
//
// <Phone
// 	value={this.state.phone}
// 	format={format.RU}
// 	onChange={phone => this.setState({ phone })}
// 	className="phone-input"
// 	style={{ color: 'black' }} />
//
var Phone_input = function (_React$Component) {
	(0, _inherits3.default)(Phone_input, _React$Component);

	function Phone_input(props, context) {
		(0, _classCallCheck3.default)(this, Phone_input);

		var _this = (0, _possibleConstructorReturn3.default)(this, (Phone_input.__proto__ || (0, _getPrototypeOf2.default)(Phone_input)).call(this, props));

		_this.on_cut = _this.on_cut.bind(_this);
		_this.on_paste = _this.on_paste.bind(_this);
		_this.on_blur = _this.on_blur.bind(_this);
		_this.on_change = _this.on_change.bind(_this);
		_this.on_key_down = _this.on_key_down.bind(_this);
		_this.format_input_text = _this.format_input_text.bind(_this);
		return _this;
	}

	(0, _createClass3.default)(Phone_input, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    value = _props.value,
			    format = _props.format,
			    rest = (0, _objectWithoutProperties3.default)(_props, ['value', 'format']);


			return _react2.default.createElement('input', (0, _extends3.default)({}, rest, {
				type: 'tel',
				ref: 'input',
				value: (0, _editable.format_value)(value, format),
				onKeyDown: this.on_key_down,
				onChange: this.on_change,
				onBlur: this.on_blur,
				onPaste: this.on_paste,
				onCut: this.on_cut }));
		}

		// Gets <input/> textual value

	}, {
		key: 'get_input_text',
		value: function get_input_text() {
			return this.input_element().value;
		}

		// Gets <input/> caret position

	}, {
		key: 'get_caret_position',
		value: function get_caret_position() {
			return this.input_element().selectionStart;
		}

		// Sets <input/> caret position

	}, {
		key: 'set_caret_position',
		value: function set_caret_position(caret_position) {
			// DOM Node
			var input = this.input_element();

			// Set caret position
			input.setSelectionRange(caret_position, caret_position);
		}

		// Gets <input/> selected position

	}, {
		key: 'get_selection',
		value: function get_selection() {
			// DOM Node
			var input = this.input_element();

			// If no selection, return nothing
			if (input.selectionStart === input.selectionEnd) {
				return;
			}

			return { start: input.selectionStart, end: input.selectionEnd };
		}

		// Returns <input/> DOM Element

	}, {
		key: 'input_element',
		value: function input_element() {
			return _reactDom2.default.findDOMNode(this.refs.input);
		}

		// Parses the <input/> textual value
		// into a plaintext international `value`

	}, {
		key: 'parse_value',
		value: function parse_value() {
			var format = this.props.format;


			return (0, _editable.parse_value)(this.get_input_text(), format);
		}

		// Formats <input/> textual value as a phone number

	}, {
		key: 'format_input_text',
		value: function format_input_text(operation) {
			var format = this.props.format;

			// Apply the pending operation to the <input/> textual value (if any),
			// and then format the <input/> textual value as a phone number
			// (and reposition the caret position accordingly)

			var _edit_and_format = (0, _editable.edit_and_format)(operation, this.get_input_text(), format, this.get_caret_position(), this.get_selection(), { has_trunk_prefix: false }),
			    phone = _edit_and_format.phone,
			    caret = _edit_and_format.caret;

			// Set <input/> textual value and caret position
			// (have to do this so that React
			//  doesn't reset caret position)


			this.set_input_text(phone, caret);
		}

		// Sets <input/> textual value and caret position

	}, {
		key: 'set_input_text',
		value: function set_input_text(text, caret_position) {
			// DOM Node
			var input = this.input_element();

			// set <input/> textual value manually to also set caret position
			// and prevent React from resetting the caret position later
			// inside subsequent `render()`.
			input.value = text;

			// Set caret position (with the neccessary adjustments)
			if (caret_position !== undefined) {
				this.set_caret_position(caret_position);
			}

			var onChange = this.props.onChange;


			if (onChange) {
				onChange(this.parse_value());
			}
		}

		// Intercepts "Cut" event.
		// Special handling for "Cut" event because
		// it wouldn't copy to clipboard otherwise.

	}, {
		key: 'on_cut',
		value: function on_cut(event) {
			setTimeout(this.format_input_text, 0);
		}

		// This handler is a workaround for `redux-form`

	}, {
		key: 'on_blur',
		value: function on_blur(event) {
			var onBlur = this.props.onBlur;

			// This `onBlur` interceptor is a workaround for `redux-form`,
			// so that it gets a parsed `value` in its `onBlur` handler,
			// not the formatted one.

			if (onBlur) {
				onBlur(this.parse_value());
			}
		}
	}, {
		key: 'on_paste',
		value: function on_paste(event) {
			this.format_input_text();
		}
	}, {
		key: 'on_change',
		value: function on_change(event) {
			this.format_input_text();
		}

		// Intercepts "Delete" and "Backspace" keys
		// (hitting "Delete" or "Backspace"
		//  at any caret position should always result in 
		//  erasing a digit)

	}, {
		key: 'on_key_down',
		value: function on_key_down(event) {
			var operation = get_operation_by_event(event);

			if (operation) {
				this.format_input_text(operation);
				return event.preventDefault();
			}
		}
	}]);
	return Phone_input;
}(_react2.default.Component); // https://github.com/sanniassin/react-input-mask/blob/master/InputElement.js
// https://github.com/halt-hammerzeit/react-phone-number-input

exports.default = Phone_input;


Phone_input.propTypes = {
	// Phone number format description.
	// Either a basic one (with `template` being a string),
	// or a more complex one (with `template` being a function).
	format: _react.PropTypes.oneOfType([_react.PropTypes.shape({
		country: _react.PropTypes.string.isRequired,
		template: _react.PropTypes.string.isRequired
	}), _react.PropTypes.shape({
		country: _react.PropTypes.string.isRequired,
		template: _react.PropTypes.func.isRequired
	})]),
	// `format` is not required for automatic
	// (iPhone style) phone number input
	// .isRequired,

	// Phone number `value`.
	// Is a plaintext international phone number
	// (e.g. "+12223333333" for USA)
	value: _react.PropTypes.string,

	// This handler is called each time
	// the phone number <input/> changes its textual value.
	onChange: _react.PropTypes.func.isRequired,

	// This `onBlur` interceptor is a workaround for `redux-form`,
	// so that it gets a parsed `value` in its `onBlur` handler,
	// not the formatted one.
	onBlur: _react.PropTypes.func
};

// Key codes
var Keys = {
	Backspace: 8,
	Delete: 46
};

function get_operation_by_event(event) {
	switch (event.keyCode) {
		case Keys.Backspace:
			return 'Backspace';

		case Keys.Delete:
			return 'Delete';
	}
}
module.exports = exports['default'];
//# sourceMappingURL=input.js.map