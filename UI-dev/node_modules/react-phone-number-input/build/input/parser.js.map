{"version":3,"sources":["../../source/input/parser.js"],"names":["parse","phone_number_digits","text","caret_position","format","options","digits","digit_index","length","has_trunk_prefix"],"mappings":";;;;;kBAQwBA,K;QA8BRC,mB,GAAAA,mB;;AAtChB;;AAQe,SAASD,KAAT,CAAeE,IAAf,EAAqBC,cAArB,EAAqCC,MAArC,EACf;AAAA,KAD4DC,OAC5D,uEADsE,EACtE;;AACC;AACA,KAAMC,SAASL,oBAAoBC,IAApB,EAA0BE,MAA1B,EAAkCC,OAAlC,CAAf;;AAEA;AACA;AACA,KAAIE,cAAc,wBAAgBL,IAAhB,EAAsBC,cAAtB,CAAlB;;AAEA;AACA;AACA;AACA,KAAII,cAAcD,OAAOE,MAAzB,EACA;AACCD,gBAAcD,OAAOE,MAArB;AACA;;AAED,QAAO,EAAEF,cAAF,EAAUC,wBAAV,EAAP;AACA;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASN,mBAAT,CAA6BC,IAA7B,EAAmCE,MAAnC,EACP;AAAA,KADkDC,OAClD,uEAD4D,EAC5D;;AACC,KAAID,MAAJ,EACA;AACC,SAAO,+BAAmBF,IAAnB,EAAyBE,MAAzB,EAAiCC,QAAQI,gBAAzC,CAAP;AACA;;AAED,QAAO,yBAAaP,IAAb,CAAP;AACA","file":"parser.js","sourcesContent":["import\n{\n\tdigit_index as get_digit_index,\n\tlocal_phone_digits,\n\tparse_digits\n}\nfrom '../phone'\n\nexport default function parse(text, caret_position, format, options = {})\n{\n\t// Extract phone number digits (they may be altered later on).\n\tconst digits = phone_number_digits(text, format, options)\n\n\t// Current digit index in the phone number\n\t// (not a character index, but a digit index)\n\tlet digit_index = get_digit_index(text, caret_position)\n\n\t// In case `format` is specified, excessive\n\t// phone number digits may have been cut off,\n\t// so check that and adjust `digit_index` accordingly.\n\tif (digit_index > digits.length)\n\t{\n\t\tdigit_index = digits.length\n\t}\n\n\treturn { digits, digit_index }\n}\n\n// Extracts phone number digits,\n// cutting off excess digits.\n// \n// If no specific `format` is required,\n// and instead the most suitable\n// phone number `format` is selected dynamically,\n// then don't pass the `format` arguments,\n// and it won't cut off the excessive digits,\n// allowing for further dynamic phone number format selection.\n//\nexport function phone_number_digits(text, format, options = {})\n{\n\tif (format)\n\t{\n\t\treturn local_phone_digits(text, format, options.has_trunk_prefix)\n\t}\n\n\treturn parse_digits(text)\n}"]}