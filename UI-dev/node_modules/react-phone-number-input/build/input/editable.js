'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.edit_and_format = edit_and_format;
exports.edit_and_parse = edit_and_parse;
exports.parse_value = parse_value;
exports.format_value = format_value;

var _phone = require('../phone');

var _parser = require('./parser');

var _parser2 = _interopRequireDefault(_parser);

var _formatter = require('./formatter');

var _formatter2 = _interopRequireDefault(_formatter);

var _editor = require('./editor');

var _editor2 = _interopRequireDefault(_editor);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Apply the pending operation to the <input/> textual value (if any),
// and then format the <input/> textual value as a phone number
// (and reposition the caret position accordingly)
function edit_and_format(operation, input_text, phone_number_format, caret_position, selection, options) {
	var _edit_and_parse = edit_and_parse(operation, input_text, phone_number_format, caret_position, selection, options),
	    digits = _edit_and_parse.digits,
	    digit_index = _edit_and_parse.digit_index;

	// If a specific phone number format is set,
	// then format the digits as a local phone number.


	if (phone_number_format) {
		return (0, _formatter2.default)(digits, digit_index, phone_number_format, { has_trunk_prefix: false });
	}

	// If no strictly set `format` supplied,
	// try to infer it from the <input/> textual value entered.
	if (!phone_number_format) {
		phone_number_format = (0, _phone.derive_phone_number_format)('+' + digits);
	}

	// If no specific `format` is set,
	// but a phone format was derived from the entered digits,
	// then format the digits as an international phone number.
	if (phone_number_format) {
		// Cut off country code
		var _digits = digits.substring(phone_number_format.country.length);
		// And adjust `digit_index` accordingly
		var _digit_index = digit_index - phone_number_format.country.length;

		var _format = (0, _formatter2.default)(_digits, _digit_index, phone_number_format, { has_trunk_prefix: false, international: true }),
		    phone = _format.phone,
		    caret = _format.caret;

		// If the `digit_index` was negative
		// (belonged to the country code)
		// then stand the caret on that country code digit.


		if (caret === undefined) {
			caret = digit_index;
		}

		return { phone: phone, caret: caret };
	}

	// No phone number formatting
	return (0, _formatter2.default)(digits, digit_index);
}

function edit_and_parse(operation, value, format, caret, selection, options) {
	// If needs to modify the value
	// (i.e. Backspace or Delete was intercepted)
	if (operation) {
		// Edit <input/>ted value according to the input conditions (caret position, key pressed)
		return (0, _editor2.default)(value, caret, format, operation, selection, options);
	}

	return (0, _parser2.default)(value, caret, format, options);
}

// Parses the <input/> textual value
// into a plaintext international value
function parse_value(input_text, format) {
	// If a strict `format` is specified,
	// then limit the digits accordingly.
	if (format) {
		var has_trunk_prefix = false;
		return (0, _phone.parse_plaintext_international)(input_text, format, has_trunk_prefix);
	}

	// Otherwise just take all the digits
	// prepending a plus sign.

	var digits = (0, _phone.parse_digits)(input_text);

	if (!digits) {
		return;
	}

	return '+' + digits;
}

// Formats `value` (which is plaintext international)
// into an <input/> textual value.
function format_value(value, format) {
	var with_trunk_prefix = false;

	// If a specific phone number `format` is specified, then use it.
	if (format) {
		// "+79991234567" -> "(999) 123-45-67"
		return (0, _phone.format_local)(value, format, with_trunk_prefix);
	}

	// Otherwise, try to infer phone number format
	// from the international number being entered.
	format = (0, _phone.derive_phone_number_format)(value);

	// If the phone number format was derived, then use it.
	if (format) {
		// "+79991234567" -> "+7 999 123 45 67" -> "7 999 123 45 67"
		return (0, _phone.format_international)(value, format).substring('+'.length);
	}

	// Otherwise don't format the value for output.
	// Just trim the plus character.
	// "+12345678" -> "12345678"

	if (!value) {
		return '';
	}

	return value.substring('+'.length);
}
//# sourceMappingURL=editable.js.map